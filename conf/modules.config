/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: false
    ]

    withName: BOWTIE2_BUILD {
        ext.prefix = { "${meta.assemblyid}" }
    }

    withName: BOWTIE2_ALIGN {
        ext.prefix = { "${meta.sampleid}" }
    }

    withName: COVERM_CONTIGS {
        ext.args = { "--methods count --strobealign-use-index" }
        ext.prefix = { "${meta.sampleid}" }
    }

    withName: EGGNOG_MAPPER {
        ext.args = "-m mmseqs --itype CDS"
        ext.prefix = { "${meta.assemblyid}" }
        publishDir = [
            path: { "${params.outdir}/databases/eggnog-mapper" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            mode: params.publish_dir_mode
        ]
    }

    withName: EGGNOG_MAPPER_DATABASE {
        ext.args = "-M"
        ext.prefix = "eggnog"
        publishDir = [
            path: { "${params.outdir}/annotations/eggnog-mapper/" },
            mode: params.publish_dir_mode,
            enabled: params.save_eggnog_db
        ]
    }

    withName: GENES_TO_GOS {
        ext.prefix = { "${meta.sampleid}" }
        publishDir = [
            path: { "${params.outdir}/coverage/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    } 

    withName: HTSEQ_COUNT {
        ext.args = "-i TCS_ID -t gene -s no"
        ext.prefix = { "${meta.sampleid}" }
    }

    withName: MEGAHIT {
        ext.args = ""
        ext.prefix = { "${meta.assemblyid}" }
        publishDir = [
            path: { "${params.outdir}/assemblies/${meta.assemblyid}/" },
            mode: params.publish_dir_mode
        ]
    }

    withName: METAEUK_EASYPREDICT {
        ext.args = ""
        ext.prefix = { "${meta.assemblyid}" }
        publishDir = [
            path: { "${params.outdir}/annotations/metaeuk/${meta.assemblyid}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: MMSEQS_CREATEDB {
        ext.prefix = { "${meta.assemblyid}" }
    }

    withName: MMSEQS_CREATESUBDB {
        ext.prefix = { "${meta.assemblyid}_filtered" }
        publishDir = [
            path: { "${params.outdir}/filtered_assemblies/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_filtered_assemblies_mmseqs
        ]
    }

    withName: MMSEQS_CONVERT2FASTA {
        ext.prefix = { "${meta.assemblyid}_filtered" }
        publishDir = [
            path: { "${params.outdir}/filtered_assemblies/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_filtered_assemblies_fasta
        ]
    }

    withName: MMSEQS_DATABASES_FUNCTION {
        ext.prefix = { "${params.mmseqs_db.replaceAll("/", "-")}"}
        publishDir = [
            path: { "${params.outdir}/databases/function/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_mmseqs_db
        ]
    }

    withName: MMSEQS_DATABASES_TAXONOMY {
        ext.prefix = { "${params.mmseqs_db.replaceAll("/", "-")}"}
        publishDir = [
            path: { "${params.outdir}/databases/taxonomy/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_mmseqs_db
        ]
    }

    withName: MMSEQS_EASYCLUSTER {
        ext.args = { "--min-seq-id 0.95 --cov-mode 1 -c 0.9" }
        ext.prefix = { "${params.assemblyid}" }
        publishDir = [
            path: { "${params.outdir}/annotation/clusters/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: MMSEQS_FILTERTAXDB {
        ext.args = { "--taxon-list ${params.filter_taxon_list}" }
        ext.prefix = { "${meta.assemblyid}_taxdb_filtered" }
    }

    withName: MMSEQS_TAXONOMY {
        ext.args = { "--tax-lineage 1" }
        ext.prefix = { "${meta.assemblyid}_taxdb" }
        publishDir = [
            path: { "${params.outdir}/taxonomy/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: SED_FASTA_HEADER {
        ext.prefix = { "${meta.assemblyid}" }
    }

    withName: STROBEALIGN_CREATEINDEX{
        ext.args = "-r 150"
    }

    withName: SUMMARISE_GOS {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
